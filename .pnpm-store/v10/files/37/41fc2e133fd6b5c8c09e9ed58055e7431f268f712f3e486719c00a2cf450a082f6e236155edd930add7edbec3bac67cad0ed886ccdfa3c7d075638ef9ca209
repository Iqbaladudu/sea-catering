{"version":3,"file":"index.js","names":["c","_c","getTranslation","useRouter","formatFilesize","isNumber","React","Fragment","useEffect","useState","useBulkUpload","Button","Gutter","ListControls","useListDrawerContext","useModal","Pagination","PerPage","RenderCustomComponent","SelectMany","useStepNav","RelationshipProvider","ViewDescription","useAuth","useConfig","useListQuery","SelectionProvider","TableColumnsProvider","useTranslation","useWindowInfo","CollectionListHeader","ListSelection","baseClass","DefaultListView","props","$","AfterList","AfterListTable","beforeActions","BeforeList","BeforeListTable","collectionSlug","columnState","Description","disableBulkDelete","disableBulkEdit","disableQueryPresets","enableRowSelections","hasCreatePermission","hasCreatePermissionFromProps","listMenuItems","newDocumentURL","queryPreset","queryPresetPermissions","renderedFilters","resolvedFilterOptions","Table","InitialTable","setTable","allowCreate","createNewDrawerSlug","isInDrawer","onBulkSelect","undefined","t0","t1","user","getEntityConfig","router","data","defaultLimit","initialLimit","handlePageChange","handlePerPageChange","query","openModal","drawerSlug","bulkUploadDrawerSlug","setCollectionSlug","setCurrentActivePath","setOnSuccess","collectionConfig","labels","upload","isUploadCollection","Boolean","isBulkUploadEnabled","bulkUpload","i18n","setStepNav","breakpoints","t2","s","smallBreak","t3","t4","docs","map","_temp","refresh","openBulkUpload","label","plural","t5","_jsx","onClick","children","className","_jsxs","totalDocs","CustomComponent","Fallback","description","admin","hideFileInputOnCreate","viewType","enableQueryPresets","length","t","el","singular","to","hasNextPage","hasPrevPage","limit","nextPage","numberOfNeighbors","onChange","page","prevPage","totalPages","handleChange","Number","limits","pagination","resetPage","pagingCounter","doc","filesize"],"sources":["../../../src/views/List/index.tsx"],"sourcesContent":["'use client'\n\nimport type { ListViewClientProps } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport { formatFilesize, isNumber } from 'payload/shared'\nimport React, { Fragment, useEffect, useState } from 'react'\n\nimport { useBulkUpload } from '../../elements/BulkUpload/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { Gutter } from '../../elements/Gutter/index.js'\nimport { ListControls } from '../../elements/ListControls/index.js'\nimport { useListDrawerContext } from '../../elements/ListDrawer/Provider.js'\nimport { useModal } from '../../elements/Modal/index.js'\nimport { Pagination } from '../../elements/Pagination/index.js'\nimport { PerPage } from '../../elements/PerPage/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { SelectMany } from '../../elements/SelectMany/index.js'\nimport { useStepNav } from '../../elements/StepNav/index.js'\nimport { RelationshipProvider } from '../../elements/Table/RelationshipProvider/index.js'\nimport { ViewDescription } from '../../elements/ViewDescription/index.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useListQuery } from '../../providers/ListQuery/index.js'\nimport { SelectionProvider } from '../../providers/Selection/index.js'\nimport { TableColumnsProvider } from '../../providers/TableColumns/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { useWindowInfo } from '../../providers/WindowInfo/index.js'\nimport { CollectionListHeader } from './ListHeader/index.js'\nimport { ListSelection } from './ListSelection/index.js'\nimport './index.scss'\n\nconst baseClass = 'collection-list'\n\nexport function DefaultListView(props: ListViewClientProps) {\n  const {\n    AfterList,\n    AfterListTable,\n    beforeActions,\n    BeforeList,\n    BeforeListTable,\n    collectionSlug,\n    columnState,\n    Description,\n    disableBulkDelete,\n    disableBulkEdit,\n    disableQueryPresets,\n    enableRowSelections,\n    hasCreatePermission: hasCreatePermissionFromProps,\n    listMenuItems,\n    newDocumentURL,\n    queryPreset,\n    queryPresetPermissions,\n    renderedFilters,\n    resolvedFilterOptions,\n    Table: InitialTable,\n  } = props\n\n  const [Table, setTable] = useState(InitialTable)\n\n  const { allowCreate, createNewDrawerSlug, isInDrawer, onBulkSelect } = useListDrawerContext()\n\n  const hasCreatePermission =\n    allowCreate !== undefined\n      ? allowCreate && hasCreatePermissionFromProps\n      : hasCreatePermissionFromProps\n\n  useEffect(() => {\n    if (InitialTable) {\n      setTable(InitialTable)\n    }\n  }, [InitialTable])\n\n  const { user } = useAuth()\n\n  const { getEntityConfig } = useConfig()\n  const router = useRouter()\n\n  const {\n    data,\n    defaultLimit: initialLimit,\n    handlePageChange,\n    handlePerPageChange,\n    query,\n  } = useListQuery()\n\n  const { openModal } = useModal()\n  const {\n    drawerSlug: bulkUploadDrawerSlug,\n    setCollectionSlug,\n    setCurrentActivePath,\n    setOnSuccess,\n  } = useBulkUpload()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n\n  const { labels, upload } = collectionConfig\n\n  const isUploadCollection = Boolean(upload)\n\n  const isBulkUploadEnabled = isUploadCollection && collectionConfig.upload.bulkUpload\n\n  const { i18n } = useTranslation()\n\n  const { setStepNav } = useStepNav()\n\n  const {\n    breakpoints: { s: smallBreak },\n  } = useWindowInfo()\n\n  const docs = React.useMemo(() => {\n    if (isUploadCollection) {\n      return data.docs.map((doc) => {\n        return {\n          ...doc,\n          filesize: formatFilesize(doc.filesize),\n        }\n      })\n    } else {\n      return data.docs\n    }\n  }, [data.docs, isUploadCollection])\n\n  const openBulkUpload = React.useCallback(() => {\n    setCollectionSlug(collectionSlug)\n    setCurrentActivePath(collectionSlug)\n    openModal(bulkUploadDrawerSlug)\n    setOnSuccess(collectionSlug, () => router.refresh())\n  }, [\n    router,\n    collectionSlug,\n    bulkUploadDrawerSlug,\n    openModal,\n    setCollectionSlug,\n    setCurrentActivePath,\n    setOnSuccess,\n  ])\n\n  useEffect(() => {\n    if (!isInDrawer) {\n      setStepNav([\n        {\n          label: labels?.plural,\n        },\n      ])\n    }\n  }, [setStepNav, labels, isInDrawer])\n\n  return (\n    <Fragment>\n      <TableColumnsProvider collectionSlug={collectionSlug} columnState={columnState}>\n        <div className={`${baseClass} ${baseClass}--${collectionSlug}`}>\n          <SelectionProvider docs={docs} totalDocs={data.totalDocs} user={user}>\n            {BeforeList}\n            <Gutter className={`${baseClass}__wrap`}>\n              <CollectionListHeader\n                collectionConfig={collectionConfig}\n                Description={\n                  <div className={`${baseClass}__sub-header`}>\n                    <RenderCustomComponent\n                      CustomComponent={Description}\n                      Fallback={\n                        <ViewDescription\n                          collectionSlug={collectionSlug}\n                          description={collectionConfig?.admin?.description}\n                        />\n                      }\n                    />\n                  </div>\n                }\n                disableBulkDelete={disableBulkDelete}\n                disableBulkEdit={disableBulkEdit}\n                hasCreatePermission={hasCreatePermission}\n                i18n={i18n}\n                isBulkUploadEnabled={isBulkUploadEnabled && !upload.hideFileInputOnCreate}\n                newDocumentURL={newDocumentURL}\n                openBulkUpload={openBulkUpload}\n                smallBreak={smallBreak}\n                viewType=\"list\"\n              />\n              <ListControls\n                beforeActions={\n                  enableRowSelections && typeof onBulkSelect === 'function'\n                    ? beforeActions\n                      ? [...beforeActions, <SelectMany key=\"select-many\" onClick={onBulkSelect} />]\n                      : [<SelectMany key=\"select-many\" onClick={onBulkSelect} />]\n                    : beforeActions\n                }\n                collectionConfig={collectionConfig}\n                collectionSlug={collectionSlug}\n                disableQueryPresets={\n                  collectionConfig?.enableQueryPresets !== true || disableQueryPresets\n                }\n                listMenuItems={listMenuItems}\n                queryPreset={queryPreset}\n                queryPresetPermissions={queryPresetPermissions}\n                renderedFilters={renderedFilters}\n                resolvedFilterOptions={resolvedFilterOptions}\n              />\n              {BeforeListTable}\n              {docs.length > 0 && <RelationshipProvider>{Table}</RelationshipProvider>}\n              {docs.length === 0 && (\n                <div className={`${baseClass}__no-results`}>\n                  <p>\n                    {i18n.t('general:noResults', { label: getTranslation(labels?.plural, i18n) })}\n                  </p>\n                  {hasCreatePermission && newDocumentURL && (\n                    <Fragment>\n                      {isInDrawer ? (\n                        <Button el=\"button\" onClick={() => openModal(createNewDrawerSlug)}>\n                          {i18n.t('general:createNewLabel', {\n                            label: getTranslation(labels?.singular, i18n),\n                          })}\n                        </Button>\n                      ) : (\n                        <Button el=\"link\" to={newDocumentURL}>\n                          {i18n.t('general:createNewLabel', {\n                            label: getTranslation(labels?.singular, i18n),\n                          })}\n                        </Button>\n                      )}\n                    </Fragment>\n                  )}\n                </div>\n              )}\n              {AfterListTable}\n              {docs.length > 0 && (\n                <div className={`${baseClass}__page-controls`}>\n                  <Pagination\n                    hasNextPage={data.hasNextPage}\n                    hasPrevPage={data.hasPrevPage}\n                    limit={data.limit}\n                    nextPage={data.nextPage}\n                    numberOfNeighbors={1}\n                    onChange={(page) => void handlePageChange(page)}\n                    page={data.page}\n                    prevPage={data.prevPage}\n                    totalPages={data.totalPages}\n                  />\n                  {data.totalDocs > 0 && (\n                    <Fragment>\n                      <div className={`${baseClass}__page-info`}>\n                        {data.page * data.limit - (data.limit - 1)}-\n                        {data.totalPages > 1 && data.totalPages !== data.page\n                          ? data.limit * data.page\n                          : data.totalDocs}{' '}\n                        {i18n.t('general:of')} {data.totalDocs}\n                      </div>\n                      <PerPage\n                        handleChange={(limit) => void handlePerPageChange(limit)}\n                        limit={isNumber(query?.limit) ? Number(query.limit) : initialLimit}\n                        limits={collectionConfig?.admin?.pagination?.limits}\n                        resetPage={data.totalDocs <= data.pagingCounter}\n                      />\n                      {smallBreak && (\n                        <div className={`${baseClass}__list-selection`}>\n                          <ListSelection\n                            collectionConfig={collectionConfig}\n                            disableBulkDelete={disableBulkDelete}\n                            disableBulkEdit={disableBulkEdit}\n                            label={getTranslation(collectionConfig.labels.plural, i18n)}\n                          />\n                          <div className={`${baseClass}__list-selection-actions`}>\n                            {enableRowSelections && typeof onBulkSelect === 'function'\n                              ? beforeActions\n                                ? [\n                                    ...beforeActions,\n                                    <SelectMany key=\"select-many\" onClick={onBulkSelect} />,\n                                  ]\n                                : [<SelectMany key=\"select-many\" onClick={onBulkSelect} />]\n                              : beforeActions}\n                          </div>\n                        </div>\n                      )}\n                    </Fragment>\n                  )}\n                </div>\n              )}\n            </Gutter>\n            {AfterList}\n          </SelectionProvider>\n        </div>\n      </TableColumnsProvider>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]}